service: notifications-platform

frameworkVersion: '3'

plugins:
  - serverless-esbuild
  - serverless-dotenv-plugin
  - serverless-offline
  - serverless-dynamodb-local
  - serverless-localstack

provider:
  name: aws
  runtime: nodejs18.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  environment:
    NODE_ENV: ${self:provider.stage}
    AWS_REGION: ${self:provider.region}
    DYNAMODB_ENDPOINT: ${self:custom.dynamodb.endpoint}
    AWS_ACCESS_KEY_ID: ${self:custom.dynamodb.accessKeyId}
    AWS_SECRET_ACCESS_KEY: ${self:custom.dynamodb.secretAccessKey}
    STAGE: ${self:provider.stage}
    NOTIFICATIONS_TABLE: ${self:service}-${self:provider.stage}-notification_events
    NOTIFICATION_QUEUE_URL: !Ref NotificationQueue
    NOTIFICATION_DLQ_URL: !Ref NotificationDeadLetterQueue
    DYNAMODB_TABLE: ${self:service}-${self:provider.stage}-notification_events
    CLOUD_REGION: ${self:provider.region}
    STORAGE_ENDPOINT: ${env:STORAGE_ENDPOINT, ''}
    SQS_ENDPOINT: ${env:SQS_ENDPOINT, ''}
    CLOUD_ACCESS_KEY_ID: ${env:CLOUD_ACCESS_KEY_ID, ''}
    CLOUD_SECRET_ACCESS_KEY: ${env:CLOUD_SECRET_ACCESS_KEY, ''}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource: 
            - !GetAtt NotificationEventsTable.Arn
            - !Join ['', [!GetAtt NotificationEventsTable.Arn, '/index/*']]

custom:
  esbuild:
    bundle: true
    minify: false
    sourcemap: true
    exclude: ['aws-sdk']
    target: 'node18'
    platform: 'node'
    concurrency: 10
    watch:
      pattern: ['src/**/*.ts']
      ignore: ['.serverless/**/*', '.build/**/*']

  serverless-offline:
    httpPort: 4000
    lambdaPort: 4002
    useChildProcesses: true
    noPrependStageInUrl: true
    prefix: 'local'
    authorizer:
      name: localAuthorizer
      type: token
      identitySource: method.request.header.Authorization
      resultTtlInSeconds: 0
      identityValidationExpression: 'Bearer .*'
    environment:
      NODE_ENV: ${self:provider.stage}
      AWS_REGION: ${self:provider.region}
      DYNAMODB_ENDPOINT: ${self:custom.dynamodb.endpoint}
      AWS_ACCESS_KEY_ID: ${self:custom.dynamodb.accessKeyId}
      AWS_SECRET_ACCESS_KEY: ${self:custom.dynamodb.secretAccessKey}

  dynamodb:
    stages:
      - dev
      - local
    start:
      port: 8000
      inMemory: true
      migrate: true
      seed: true
      convertEmptyValues: true
      docker: true
    seed:
      domain:
        sources:
          - table: notification_events
            sources: [scripts/local/notifications_events_db.json]
    endpoint: http://localhost:8000
    accessKeyId: local
    secretAccessKey: local

resources:
  - ${file(resources/dynamodb.yml)}
  - ${file(resources/sqs.yml)}

functions:
  localAuthorizer:
    handler: src/adapters/primary/handlers/auth/localAuthorizer.handler
    events:
      - http:
          path: /auth
          method: post
          cors: true

  getNotifications:
    handler: src/adapters/primary/handlers/notifications/getNotifications.handler
    events:
      - http:
          path: /notification_events
          method: get
          cors: true
          authorizer:
            name: localAuthorizer
            type: token
            identitySource: method.request.header.Authorization
            resultTtlInSeconds: 0
            identityValidationExpression: 'Bearer .*'

  getNotificationById:
    handler: src/adapters/primary/handlers/notifications/getNotificationById.handler
    events:
      - http:
          path: /notification_events/{id}
          method: get
          cors: true
          authorizer:
            name: localAuthorizer
            type: token
            identitySource: method.request.header.Authorization
            resultTtlInSeconds: 0
            identityValidationExpression: 'Bearer .*'

  replayNotification:
    handler: src/adapters/primary/handlers/notifications/replayNotification.handler
    events:
      - http:
          path: /notification_events/{id}/replay
          method: post
          cors: true
          authorizer:
            name: localAuthorizer
            type: token
            identitySource: method.request.header.Authorization
            resultTtlInSeconds: 0
            identityValidationExpression: 'Bearer .*'
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:UpdateItem
          - sqs:SendMessage
        Resource: 
          - !GetAtt NotificationEventsTable.Arn
          - !Join ['', [!GetAtt NotificationEventsTable.Arn, '/index/*']]
          - !GetAtt NotificationQueue.Arn

  sendWebhook:
    handler: src/adapters/primary/handlers/webhooks/sendWebhook.handler
    events:
      - sqs:
          arn: !GetAtt NotificationQueue.Arn
          batchSize: 1
          maximumBatchingWindow: 30
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:UpdateItem
          - sqs:ReceiveMessage
          - sqs:DeleteMessage
          - sqs:GetQueueAttributes
          - sqs:ChangeMessageVisibility
        Resource: 
          - !GetAtt NotificationEventsTable.Arn
          - !Join ['', [!GetAtt NotificationEventsTable.Arn, '/index/*']]
          - !GetAtt NotificationQueue.Arn
          - !GetAtt NotificationDeadLetterQueue.Arn