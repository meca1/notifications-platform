service: notifications-platform

frameworkVersion: '3'

plugins:
  - serverless-esbuild
  - serverless-dotenv-plugin

custom:
  dotenv:
    include:
      - NODE_ENV
      - STAGE
      - DYNAMODB_TABLE
      - NOTIFICATION_QUEUE_URL
      - NOTIFICATION_DLQ_URL
      - MOCK_WEBHOOK_SHOULD_FAIL
      - JWT_SECRET
      - JWT_EXPIRES_IN
  esbuild:
    bundle: true
    minify: true
    sourcemap: false
    exclude: ['aws-sdk']
    target: 'node18'
    platform: 'node'
    concurrency: 10
  apiGatewayThrottling:
    rateLimit: 1000
    burstLimit: 500

provider:
  name: aws
  runtime: nodejs18.x
  stage: ${opt:stage, 'prod'}
  region: ${opt:region, 'us-east-1'}
  environment:
    NODE_ENV: ${self:provider.stage}
    STAGE: ${self:provider.stage}
    NOTIFICATIONS_TABLE: ${self:service}-${self:provider.stage}-notification_events
    NOTIFICATION_QUEUE_URL: !Ref NotificationQueueUrl
    NOTIFICATION_DLQ_URL: !Ref NotificationDeadLetterQueue
    DYNAMODB_TABLE: ${self:service}-${self:provider.stage}-notification_events
    SUBSCRIPTIONS_TABLE: ${self:service}-${self:provider.stage}-subscriptions
    JWT_SECRET: ${env:JWT_SECRET, 'your-secret-key'}
    JWT_EXPIRES_IN: ${env:JWT_EXPIRES_IN, '1h'}

  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource: 
            - !GetAtt NotificationEventsTable.Arn
            - !Join ['', [!GetAtt NotificationEventsTable.Arn, '/index/*']]
            - !GetAtt SubscriptionsTable.Arn
            - !Join ['', [!GetAtt SubscriptionsTable.Arn, '/index/*']]
        - Effect: Allow
          Action:
            - sqs:SendMessage
            - sqs:ReceiveMessage
            - sqs:DeleteMessage
            - sqs:GetQueueAttributes
            - sqs:ChangeMessageVisibility
          Resource:
            - !GetAtt NotificationQueue.Arn
            - !GetAtt NotificationDeadLetterQueue.Arn

resources:
  - ${file(resources/dynamodb.yml)}
  - ${file(resources/sqs.yml)}
  - ${file(resources/subscriptions.yml)}

functions:
  tokenAuthorizer:
    handler: src/adapters/primary/handlers/auth/tokenAuthorizer.handler
    events:
      - http:
          path: /auth
          method: post
          cors: true

  generateToken:
    handler: src/adapters/primary/handlers/auth/generateToken.handler
    events:
      - http:
          path: /auth/token
          method: post
          cors: true

  getNotifications:
    handler: src/adapters/primary/handlers/notifications/getNotifications.handler
    events:
      - http:
          path: /notification_events
          method: get
          cors: true
          authorizer:
            name: tokenAuthorizer
            type: token
            identitySource: method.request.header.Authorization
            resultTtlInSeconds: 0
            identityValidationExpression: 'Bearer .*'

  getNotificationById:
    handler: src/adapters/primary/handlers/notifications/getNotificationById.handler
    events:
      - http:
          path: /notification_events/{id}
          method: get
          cors: true
          authorizer:
            name: tokenAuthorizer
            type: token
            identitySource: method.request.header.Authorization
            resultTtlInSeconds: 0
            identityValidationExpression: 'Bearer .*'

  replayNotification:
    handler: src/adapters/primary/handlers/notifications/replayNotification.handler
    events:
      - http:
          path: notification_events/{id}/replay
          method: post
          cors: true
          authorizer:
            name: tokenAuthorizer
            type: token

  sendWebhook:
    handler: src/adapters/primary/handlers/webhooks/sendWebhook.handler
    events:
      - sqs:
          arn: !GetAtt NotificationQueue.Arn
          batchSize: 1
          maximumBatchingWindow: 30

  createSubscription:
    handler: src/adapters/primary/handlers/subscriptions/createSubscription.handler
    events:
      - http:
          path: subscriptions
          method: post
          cors: true

  createNotification:
    handler: src/adapters/primary/handlers/notifications/createNotification.handler
    events:
      - http:
          path: notification_events
          method: post
          cors: true

  mockWebhook:
    handler: src/adapters/primary/handlers/webhooks/mockWebhook.handler
    events:
      - http:
          path: webhook
          method: post
          cors: true
    environment:
      MOCK_WEBHOOK_SHOULD_FAIL: ${opt:mockWebhookShouldFail, 'false'}
