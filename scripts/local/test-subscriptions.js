const { DynamoDBClient } = require('@aws-sdk/client-dynamodb');
const { DynamoDBDocumentClient, PutCommand, QueryCommand, DeleteCommand } = require('@aws-sdk/lib-dynamodb');
const axios = require('axios');

// Configuraci√≥n del cliente DynamoDB para local
const client = new DynamoDBClient({
  region: 'local',
  endpoint: 'http://localhost:8000',
  credentials: {
    accessKeyId: 'dummy',
    secretAccessKey: 'dummy'
  }
});

const docClient = DynamoDBDocumentClient.from(client);
const TABLE_NAME = 'subscriptions';
const API_ENDPOINT = 'http://localhost:4000/local';

// Funci√≥n para crear una suscripci√≥n v√≠a API
async function createSubscriptionAPI(clientId, eventType, webhookUrl) {
  try {
    console.log('üì§ Enviando request a API:', {
      url: `${API_ENDPOINT}/subscriptions`,
      method: 'POST',
      data: { clientId, eventType, webhookUrl }
    });

    const response = await axios.post(`${API_ENDPOINT}/subscriptions`, {
      clientId,
      eventType,
      webhookUrl
    });
    console.log('‚úÖ Suscripci√≥n creada exitosamente v√≠a API:', response.data);
    return response.data;
  } catch (error) {
    console.error('‚ùå Error al crear suscripci√≥n v√≠a API:', {
      status: error.response?.status,
      data: error.response?.data,
      message: error.message
    });
    throw error;
  }
}

// Funci√≥n para crear una suscripci√≥n v√≠a DynamoDB
/*
async function createSubscriptionDynamoDB(clientId, eventType, webhookUrl) {
  const params = {
    TableName: TABLE_NAME,
    Item: {
      client_id: clientId,
      event_type: eventType,
      webhook_url: webhookUrl,
      created_at: new Date().toISOString(),
      is_active: true,
    },
  };

  try {
    await docClient.send(new PutCommand(params));
    console.log('‚úÖ Suscripci√≥n creada exitosamente en DynamoDB');
    return params.Item;
  } catch (error) {
    console.error('‚ùå Error al crear suscripci√≥n en DynamoDB:', error);
    throw error;
  }
}
*/

// Funci√≥n para buscar suscripciones por clientId v√≠a DynamoDB
/*
async function findSubscriptionsByClientIdDynamoDB(clientId) {
  const params = {
    TableName: TABLE_NAME,
    KeyConditionExpression: 'client_id = :clientId',
    ExpressionAttributeValues: {
      ':clientId': clientId,
    },
  };

  try {
    const result = await docClient.send(new QueryCommand(params));
    console.log('‚úÖ Suscripciones encontradas en DynamoDB:', result.Items);
    return result.Items;
  } catch (error) {
    console.error('‚ùå Error al buscar suscripciones en DynamoDB:', error);
    throw error;
  }
}
*/

// Funci√≥n para buscar una suscripci√≥n espec√≠fica v√≠a DynamoDB
/*
async function findSubscriptionDynamoDB(clientId, eventType) {
  const params = {
    TableName: TABLE_NAME,
    KeyConditionExpression: 'client_id = :clientId AND event_type = :eventType',
    ExpressionAttributeValues: {
      ':clientId': clientId,
      ':eventType': eventType,
    },
  };

  try {
    const result = await docClient.send(new QueryCommand(params));
    console.log('‚úÖ Suscripci√≥n encontrada en DynamoDB:', result.Items[0]);
    return result.Items[0];
  } catch (error) {
    console.error('‚ùå Error al buscar suscripci√≥n en DynamoDB:', error);
    throw error;
  }
}
*/

// Funci√≥n principal de prueba
async function runTests() {
  try {
    console.log('\nüöÄ Iniciando pruebas de suscripciones...\n');

    // Test 1: Crear suscripci√≥n exitosa
    console.log('üìù Test 1: Crear suscripci√≥n exitosa');
    const testClientId = 'test-client-' + Date.now();
    const testEventType = 'PAYMENT_RECEIVED';
    const testWebhookUrl = 'https://api.example.com/webhook';
    await createSubscriptionAPI(testClientId, testEventType, testWebhookUrl);

    // Test 2: Crear suscripci√≥n sin clientId
    console.log('\nüìù Test 2: Crear suscripci√≥n sin clientId');
    try {
      await createSubscriptionAPI(undefined, testEventType, testWebhookUrl);
      console.error('‚ùå Error: Se esperaba que fallara por clientId faltante');
    } catch (error) {
      console.log('‚úÖ Test exitoso: API rechaz√≥ la petici√≥n sin clientId');
    }

    // Test 3: Crear suscripci√≥n sin eventType
    console.log('\nüìù Test 3: Crear suscripci√≥n sin eventType');
    try {
      await createSubscriptionAPI(testClientId, undefined, testWebhookUrl);
      console.error('‚ùå Error: Se esperaba que fallara por eventType faltante');
    } catch (error) {
      console.log('‚úÖ Test exitoso: API rechaz√≥ la petici√≥n sin eventType');
    }

    // Test 4: Crear suscripci√≥n sin webhookUrl
    console.log('\nüìù Test 4: Crear suscripci√≥n sin webhookUrl');
    try {
      await createSubscriptionAPI(testClientId, testEventType, undefined);
      console.error('‚ùå Error: Se esperaba que fallara por webhookUrl faltante');
    } catch (error) {
      console.log('‚úÖ Test exitoso: API rechaz√≥ la petici√≥n sin webhookUrl');
    }

    // Test 5: Crear suscripci√≥n con webhookUrl inv√°lido
    console.log('\nüìù Test 5: Crear suscripci√≥n con webhookUrl inv√°lido');
    try {
      await createSubscriptionAPI(testClientId, testEventType, 'not-a-url');
      console.error('‚ùå Error: Se esperaba que fallara por webhookUrl inv√°lido');
    } catch (error) {
      console.log('‚úÖ Test exitoso: API rechaz√≥ la petici√≥n con webhookUrl inv√°lido');
    }

    // Test 6: Crear suscripci√≥n con eventType inv√°lido
    console.log('\nüìù Test 6: Crear suscripci√≥n con eventType inv√°lido');
    try {
      await createSubscriptionAPI(testClientId, 'INVALID_EVENT_TYPE', testWebhookUrl);
      console.error('‚ùå Error: Se esperaba que fallara por eventType inv√°lido');
    } catch (error) {
      console.log('‚úÖ Test exitoso: API rechaz√≥ la petici√≥n con eventType inv√°lido');
    }

    // Test 7: Crear suscripci√≥n duplicada
    console.log('\nüìù Test 7: Crear suscripci√≥n duplicada');
    try {
      await createSubscriptionAPI(testClientId, testEventType, testWebhookUrl);
      console.error('‚ùå Error: Se esperaba que fallara por suscripci√≥n duplicada');
    } catch (error) {
      console.log('‚úÖ Test exitoso: API rechaz√≥ la petici√≥n de suscripci√≥n duplicada');
    }

    console.log('\n‚ú® Todas las pruebas completadas exitosamente!\n');
  } catch (error) {
    console.error('\n‚ùå Error en las pruebas:', error);
    process.exit(1);
  }
}

// Ejecutar las pruebas
runTests(); 